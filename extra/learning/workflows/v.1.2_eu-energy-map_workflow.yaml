EU_Energy_Map_v1.2:
  I. Import:
    Description: Import all required libraries for data processing, visualization, and dashboard interactivity.
    Subcomponents:
      - Standard: os, json
      - Data handling: pandas (pd), geopandas (gpd)
      - Visualization: plotly.express (px), plotly.graph_objects (go), plotly.io (pio)
      - Dashboard: panel (pn)

  II. Settings:
    Description: Configure environment settings for the dashboard and visual outputs.
    Subcomponents:
      - Panel extensions: 'tabulator', 'plotly', 'material'
      - Plotly renderer configuration (optional)
      - Mapbox access token setup

  III. Functions:
    Description: Define reusable functions for visualization and data processing.
    Subcomponents:
      - `create_choropleth_map(year)`: Generates a map of renewable energy by country.
      - `create_bar_chart_year(year)`: Displays a bar chart of average renewables by country for a selected year.
      - `create_bar_chart_country(country)`: Time series of renewable energy share for a given country.
      - `update_map(event)`: Refreshes the map visualization.
      - `update_year_chart(event)`: Updates the year-based bar chart.
      - `update_country_chart(event)`: Updates the chart based on selected country.
      - `get_flag(country_code)`: Utility to generate flag emoji from ISO country codes.

  IV. Main:
    Description: Prepare data, perform preprocessing, and initialize visual elements.
    Subcomponents:
      - Load CSV and GeoJSON data
      - Merge datasets on country codes
      - Clean and format data (rename columns, round values, add flags)
      - Create widgets: year slider, country selector
      - Instantiate initial map and charts using default selections

  V. Dashboard:
    Description: Assemble dashboard layout and make the application servable.
    Subcomponents:
      - Sidebar with project info and widget controls
      - Main panel with map and visual charts
      - Tabs: "Filter by Year", "Filter by Country", "Explore Data"
      - Use `FastListTemplate` to structure and deploy the dashboard
      - `.servable()` call to expose the app
